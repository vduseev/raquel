[project]
name = "raquel"
version = "0.3.2"
description = "Simple Job Queues using SQL"
authors = [{ name = "vduseev", email = "vagiz@duseev.com" }]
requires-python = "~=3.10"
readme = "README.md"
license = "Apache-2.0"
keywords = [
    "job",
    "task",
    "queue",
    "sql",
    "distributed",
    "worker",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Distributed Computing",
]
dependencies = ["sqlalchemy~=2.0"]

[project.optional-dependencies]
asyncio = ["greenlet~=3.0"]

[project.urls]
Homepage = "https://github.com/vduseev/raquel"
Repository = "https://github.com/vduseev/raquel"

[dependency-groups]
test = [
    "pytest~=8.3",
    "pytest-cov~=5.0",
    "psycopg2-binary~=2.9",
    "asyncpg~=0.30",
    "pytest-asyncio~=0.24",
]
dev = [
    "bump-my-version>=1.1.4",
    "ruff~=0.9",
]

[tool.uv]
default-groups = [
    "test",
    "dev",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.coverage.run]
branch = true
source = ["raquel"]

[tool.coverage.report]
exclude_also = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self\\.debug",
    "if settings\\.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "raise RuntimeError",
    "raise ValueError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "tests",
]

line-length = 79
indent-width = 4
target-version = "py312"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = 79

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.bumpversion]
current_version = "0.3.2"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
commit_args = ""
